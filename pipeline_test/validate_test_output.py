#!/usr/bin/env python3
"""
Validate Test Output Script - Agent and Crew Testing Validation

This script validates the structure of JSON output files generated by the agent-based testing.
It checks both agent-by-agent test results and crew end-to-end test results.

Usage:
    python validate_test_output.py [filename]
    
If no filename is provided, it will validate the most recent test output file.
"""

import json
import sys
from pathlib import Path
from typing import Dict, Any, List
from datetime import datetime

def load_output_file(file_path: str) -> Dict[str, Any]:
    """Load and parse a JSON output file."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"❌ File not found: {file_path}")
        return None
    except json.JSONDecodeError as e:
        print(f"❌ Invalid JSON in {file_path}: {e}")
        return None
    except Exception as e:
        print(f"❌ Error reading {file_path}: {e}")
        return None

def validate_agent_test_output(data: Dict[str, Any]) -> Dict[str, Any]:
    """Validate individual agent test output structure."""
    validation = {
        "valid": True,
        "errors": [],
        "warnings": [],
        "details": {}
    }
    
    # Check required top-level fields
    required_fields = ["status", "agent", "timestamp"]
    for field in required_fields:
        if field not in data:
            validation["valid"] = False
            validation["errors"].append(f"Missing required field: {field}")
    
    # Validate status
    if "status" in data:
        if data["status"] not in ["success", "error"]:
            validation["valid"] = False
            validation["errors"].append(f"Invalid status: {data['status']}")
    
    # Validate agent name
    if "agent" in data:
        valid_agents = ["ExtractionAgent", "StructuredProcessingAgent", "VectorizationAgent", "LoadingAgent"]
        if data["agent"] not in valid_agents:
            validation["warnings"].append(f"Unknown agent: {data['agent']}")
    
    # Validate timestamp format
    if "timestamp" in data:
        try:
            datetime.fromisoformat(data["timestamp"])
        except ValueError:
            validation["warnings"].append(f"Invalid timestamp format: {data['timestamp']}")
    
    # Validate output structure based on status
    if data.get("status") == "success":
        if "output" not in data:
            validation["warnings"].append("Success status but no output field")
        if "input" not in data:
            validation["warnings"].append("Success status but no input field")
    
    elif data.get("status") == "error":
        if "error" not in data:
            validation["warnings"].append("Error status but no error field")
    
    validation["details"]["agent"] = data.get("agent", "unknown")
    validation["details"]["status"] = data.get("status", "unknown")
    
    return validation

def validate_agent_by_agent_output(data: Dict[str, Any]) -> Dict[str, Any]:
    """Validate agent-by-agent test output structure."""
    validation = {
        "valid": True,
        "errors": [],
        "warnings": [],
        "details": {}
    }
    
    # Check required top-level fields
    required_fields = ["test_type", "timestamp", "agents", "summary"]
    for field in required_fields:
        if field not in data:
            validation["valid"] = False
            validation["errors"].append(f"Missing required field: {field}")
    
    # Validate test_type
    if "test_type" in data and data["test_type"] != "agent_by_agent":
        validation["warnings"].append(f"Unexpected test_type: {data['test_type']}")
    
    # Validate agents structure
    if "agents" in data:
        if not isinstance(data["agents"], dict):
            validation["valid"] = False
            validation["errors"].append("Agents field must be a dictionary")
        else:
            expected_agents = ["extraction", "processing", "vectorization", "loading"]
            for agent_name in expected_agents:
                if agent_name not in data["agents"]:
                    validation["warnings"].append(f"Missing agent test: {agent_name}")
            
            # Validate each agent's test result
            for agent_name, agent_result in data["agents"].items():
                agent_validation = validate_agent_test_output(agent_result)
                if not agent_validation["valid"]:
                    validation["valid"] = False
                    validation["errors"].extend([f"{agent_name}: {error}" for error in agent_validation["errors"]])
                validation["warnings"].extend([f"{agent_name}: {warning}" for warning in agent_validation["warnings"]])
    
    # Validate summary structure
    if "summary" in data:
        summary = data["summary"]
        required_summary_fields = ["total_agents", "successful", "failed", "success_rate"]
        for field in required_summary_fields:
            if field not in summary:
                validation["warnings"].append(f"Missing summary field: {field}")
        
        # Validate summary values
        if "total_agents" in summary and "successful" in summary and "failed" in summary:
            total = summary["total_agents"]
            successful = summary["successful"]
            failed = summary["failed"]
            if successful + failed != total:
                validation["warnings"].append(f"Summary counts don't add up: {successful} + {failed} != {total}")
    
    validation["details"]["total_agents"] = data.get("summary", {}).get("total_agents", 0)
    validation["details"]["success_rate"] = data.get("summary", {}).get("success_rate", "0%")
    
    return validation

def validate_crew_end_to_end_output(data: Dict[str, Any]) -> Dict[str, Any]:
    """Validate crew end-to-end test output structure."""
    validation = {
        "valid": True,
        "errors": [],
        "warnings": [],
        "details": {}
    }
    
    # Check required top-level fields
    required_fields = ["status", "test_type", "timestamp"]
    for field in required_fields:
        if field not in data:
            validation["valid"] = False
            validation["errors"].append(f"Missing required field: {field}")
    
    # Validate test_type
    if "test_type" in data and data["test_type"] != "crew_end_to_end":
        validation["warnings"].append(f"Unexpected test_type: {data['test_type']}")
    
    # Validate status
    if "status" in data:
        if data["status"] not in ["success", "error"]:
            validation["valid"] = False
            validation["errors"].append(f"Invalid status: {data['status']}")
    
    # Validate timestamp format
    if "timestamp" in data:
        try:
            datetime.fromisoformat(data["timestamp"])
        except ValueError:
            validation["warnings"].append(f"Invalid timestamp format: {data['timestamp']}")
    
    # Validate input/output structure based on status
    if data.get("status") == "success":
        if "output" not in data:
            validation["warnings"].append("Success status but no output field")
        if "input" not in data:
            validation["warnings"].append("Success status but no input field")
    
    elif data.get("status") == "error":
        if "error" not in data:
            validation["warnings"].append("Error status but no error field")
    
    validation["details"]["test_type"] = data.get("test_type", "unknown")
    validation["details"]["status"] = data.get("status", "unknown")
    
    return validation

def validate_complete_pipeline_output(data: Dict[str, Any]) -> Dict[str, Any]:
    """Validate complete pipeline test output structure."""
    validation = {
        "valid": True,
        "errors": [],
        "warnings": [],
        "details": {}
    }
    
    # Check required top-level fields
    required_fields = ["test_session", "agent_by_agent", "crew_end_to_end", "summary"]
    for field in required_fields:
        if field not in data:
            validation["valid"] = False
            validation["errors"].append(f"Missing required field: {field}")
    
    # Validate test_session
    if "test_session" in data:
        session = data["test_session"]
        if "timestamp" not in session:
            validation["warnings"].append("Missing test_session timestamp")
        if "test_type" not in session:
            validation["warnings"].append("Missing test_session test_type")
        if "output_files" not in session:
            validation["warnings"].append("Missing test_session output_files")
    
    # Validate agent_by_agent section
    if "agent_by_agent" in data:
        agent_validation = validate_agent_by_agent_output(data["agent_by_agent"])
        if not agent_validation["valid"]:
            validation["valid"] = False
            validation["errors"].extend([f"agent_by_agent: {error}" for error in agent_validation["errors"]])
        validation["warnings"].extend([f"agent_by_agent: {warning}" for warning in agent_validation["warnings"]])
    
    # Validate crew_end_to_end section
    if "crew_end_to_end" in data:
        crew_validation = validate_crew_end_to_end_output(data["crew_end_to_end"])
        if not crew_validation["valid"]:
            validation["valid"] = False
            validation["errors"].extend([f"crew_end_to_end: {error}" for error in crew_validation["errors"]])
        validation["warnings"].extend([f"crew_end_to_end: {warning}" for warning in crew_validation["warnings"]])
    
    # Validate summary
    if "summary" in data:
        summary = data["summary"]
        required_summary_fields = ["agent_success_rate", "crew_success", "overall_status"]
        for field in required_summary_fields:
            if field not in summary:
                validation["warnings"].append(f"Missing summary field: {field}")
        
        # Validate overall_status
        if "overall_status" in summary:
            valid_statuses = ["success", "partial_success", "failed"]
            if summary["overall_status"] not in valid_statuses:
                validation["warnings"].append(f"Invalid overall_status: {summary['overall_status']}")
    
    validation["details"]["overall_status"] = data.get("summary", {}).get("overall_status", "unknown")
    validation["details"]["agent_success_rate"] = data.get("summary", {}).get("agent_success_rate", "0%")
    validation["details"]["crew_success"] = data.get("summary", {}).get("crew_success", False)
    
    return validation

def print_validation_results(test_type: str, validation: Dict[str, Any]):
    """Print formatted validation results."""
    print(f"\n🔍 {test_type.upper()} VALIDATION RESULTS")
    print("=" * 50)
    
    # Status
    status_icon = "✅" if validation["valid"] else "❌"
    print(f"{status_icon} Overall Status: {'VALID' if validation['valid'] else 'INVALID'}")
    
    # Details
    if validation["details"]:
        print(f"\n📊 Details:")
        for key, value in validation["details"].items():
            print(f"   {key}: {value}")
    
    # Errors
    if validation["errors"]:
        print(f"\n❌ Errors ({len(validation['errors'])}):")
        for error in validation["errors"]:
            print(f"   • {error}")
    
    # Warnings
    if validation["warnings"]:
        print(f"\n⚠️ Warnings ({len(validation['warnings'])}):")
        for warning in validation["warnings"]:
            print(f"   • {warning}")
    
    if not validation["errors"] and not validation["warnings"]:
        print(f"\n🎉 No issues found!")

def find_most_recent_test_file() -> str:
    """Find the most recent test output file."""
    test_outputs_dir = Path("test_outputs")
    if not test_outputs_dir.exists():
        print("❌ test_outputs directory not found")
        return None
    
    # Look for test files
    test_files = list(test_outputs_dir.glob("test_*.json"))
    if not test_files:
        print("❌ No test output files found")
        return None
    
    # Sort by modification time and return the most recent
    most_recent = max(test_files, key=lambda f: f.stat().st_mtime)
    return str(most_recent)

def main():
    """Main validation function."""
    print("🔍 Pipeline Test Output Validator")
    print("=" * 50)
    
    # Determine which file to validate
    if len(sys.argv) > 1:
        file_path = sys.argv[1]
    else:
        file_path = find_most_recent_test_file()
        if not file_path:
            return
    
    print(f"📁 Validating file: {file_path}")
    
    # Load the data
    data = load_output_file(file_path)
    if data is None:
        return
    
    # Determine the type of test output and validate accordingly
    test_type = data.get("test_type", "unknown")
    
    if test_type == "agent_by_agent":
        validation = validate_agent_by_agent_output(data)
        print_validation_results("Agent-by-Agent", validation)
    
    elif test_type == "crew_end_to_end":
        validation = validate_crew_end_to_end_output(data)
        print_validation_results("Crew End-to-End", validation)
    
    elif "test_session" in data and "test_type" in data.get("test_session", {}):
        # This is a complete pipeline test
        validation = validate_complete_pipeline_output(data)
        print_validation_results("Complete Pipeline", validation)
    
    else:
        print(f"❌ Unknown test output type: {test_type}")
        print("Available data keys:", list(data.keys()))
        return
    
    # Final summary
    print(f"\n" + "=" * 50)
    if validation["valid"]:
        print("🎉 Validation completed successfully!")
    else:
        print("⚠️ Validation completed with errors. Please check the output above.")

if __name__ == "__main__":
    main() 